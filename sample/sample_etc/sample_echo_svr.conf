[atapp]
; =========== bus configure ===========
id = 0x00000001                    ; bus id
id_mask     = 8.8.8.8              ; if set, we can convert 0.0.0.1 to 0x00000001
name        = "sample_echo_svr-1"  ; name with id
type_id     = 1                    ; server type id
type_name   = "sample_echo_svr"    ; server type name
# remove_pidfile_after_exit = false

hostname = ""                           ; hostname, any host should has a unique name. if empty, use the hostname of system network
bus.listen = 'ipv6://:::21437'          ; tcp channel

bus.subnets = 0/16                      ; children mask(at most 2^16 children )
bus.proxy = ''                          ; atproxy has no parent node
bus.loop_times = 1000                   ; max message number in one loop
bus.ttl = 16                            ; max ttl when transfer messages
bus.backlog = 256                       ; tcp backlog
bus.access_token_max_number = 5         ; max number of access tokens
# bus.access_tokens =                   ; access tokens
bus.overwrite_listen_path = false       ; do not overwrite listen path
bus.first_idle_timeout = 30s            ; first idle timeout when have new connection(second)
bus.ping_interval = 60s                 ; ping interval(second)
bus.retry_interval = 3s                 ; retry interval when error happen(second)
bus.fault_tolerant = 3                  ; how many errors will lead to kill connection
bus.msg_size = 262144                   ; max message size(256KB)
bus.recv_buffer_size = 8388608          ; recv channel size(8MB), will be used to initialize (shared) memory channel size
bus.send_buffer_size = 2097152          ; send buffer size, will be used to initialize io_stream channel write queue
bus.send_buffer_number = 0              ; send message number limit, will be used to initialize io_stream channel write queue, 0 for dynamic buffer
# bus.gateways.0.address = ipv6://:::21437
# bus.gateways.0.match_namespaces =
# bus.gateways.0.match_namespaces =
# bus.gateways.0.match_hosts =
# bus.gateways.0.match_hosts =
# bus.gateways.0.match_labels.key = value

; =========== upper configures can not be reload ===========
; =========== log configure ===========
log.level = 6                           ; log active level
log.cat.number = 1                      ; 2 log categorizes
log.cat.0.name = default                ; log categorize 1's name = default
log.cat.0.prefix = "[Log %L][%F %T.%f][%s:%n(%C)]: "
log.cat.0.stacktrace.min = error
log.cat.0.stacktrace.max = fatal


; default error log for file
log.default.0.type = file
log.default.0.level.min = 1
log.default.0.level.max = 3
log.default.0.rotate.number = 10
log.default.0.rotate.size = 10485760 ; 10MB
log.default.0.file = ../log/sample_echo_svr.error.%N.log
log.default.0.writing_alias = ../log/sample_echo_svr.error.log
log.default.0.auto_flush = 4
log.default.0.flush_interval = 1m    ; 60s (unit: s,m,h,d)

; default normal log for file
log.default.1.type = file
log.default.1.level.min = 1
log.default.1.level.max = 6
log.default.1.rotate.number = 10
log.default.1.rotate.size = 10485760 ; 10MB
log.default.1.file = ../log/sample_echo_svr.all.%N.log
log.default.1.writing_alias = ../log/sample_echo_svr.all.log
log.default.1.auto_flush = 4
log.default.1.flush_interval = 1m    ; 60s (unit: s,m,h,d)

; default error log for stderr
log.default.2.type = stderr
log.default.2.level.min = 1
log.default.2.level.max = 3

; default normal log for stdout
log.default.3.type = stdout
log.default.3.level.min = 4
log.default.3.level.max = 6


; =========== timer ===========
timer.tick_interval = 32ms                ; 32ms for tick active
timer.stop_timeout = 10s              ; 10s for stop operation

; =========== etcd ===========
etcd.enable = false
etcd.hosts  = http://127.0.0.1:2375
etcd.path   = /atapp/services/astf4g/
etcd.authorization = "" # etcd authorization: username:password
# etcd.http.debug= false
# etcd.http.user_agent= ""
# etcd.http.proxy =
# etcd.http.no_proxy =
# etcd.http.proxy_user_name =
# etcd.http.proxy_password =
etcd.ssl.enable_alpn = true
etcd.ssl.verify_peer = false
etcd.ssl.ssl_min_version = TLSv1.2
# etcd.ssl.ssl_client_cert =        # CURLOPT_SSLCERT
# etcd.ssl.ssl_client_cert_type =   # CURLOPT_SSLCERTTYPE: PEM or DER
# etcd.ssl.ssl_client_key =         # CURLOPT_SSLKEY
# etcd.ssl.ssl_client_key_type =    # CURLOPT_SSLKEYTYPE: PEM, DER or ENG
# etcd.ssl.ssl_client_key_passwd =  # CURLOPT_KEYPASSWD or CURLOPT_SSLCERTPASSWD
# etcd.ssl.ssl_ca_cert =            # CURLOPT_CAINFO
# etcd.ssl.ssl_proxy_cert =         # CURLOPT_PROXY_SSLCERT
# etcd.ssl.ssl_proxy_cert_type =    # CURLOPT_PROXY_SSLCERTTYPE: PEM or DER
# etcd.ssl.ssl_proxy_key =          # CURLOPT_PROXY_SSLKEY
# etcd.ssl.ssl_proxy_key_type =     # CURLOPT_PROXY_SSLKEYTYPE: PEM, DER or ENG
# etcd.ssl.ssl_proxy_key_passwd =   # CURLOPT_PROXY_KEYPASSWD or CURLOPT_PROXY_SSLCERTPASSWD
# etcd.ssl.ssl_proxy_ca_cert =      # CURLOPT_PROXY_CAINFO
# etcd.ssl.ssl_cipher_list =        # CURLOPT_SSL_CIPHER_LIST
# etcd.ssl.ssl_cipher_list_tls13 =  # CURLOPT_TLS13_CIPHERS
etcd.cluster.auto_update = true     # set false when etcd service is behind a safe cluster(Kubernetes etc.)
etcd.cluster.update_interval = 5m   # unit: ms/milliseconds, s(econd), m(inute), h(our), d(ay)
etcd.cluster.retry_interval = 1m    # unit: ms/milliseconds, s(econd), m(inute), h(our), d(ay)
etcd.keepalive.timeout = 31s        # unit: ms/milliseconds, s(econd), m(inute), h(our), d(ay)
etcd.keepalive.ttl = 10s            # unit: ms/milliseconds, s(econd), m(inute), h(our), d(ay)
etcd.request.timeout = 15s          # unit: ms/milliseconds, s(econd), m(inute), h(our), d(ay)
etcd.init.timeout = 5s              # unit: ms/milliseconds, s(econd), m(inute), h(our), d(ay)
etcd.init.tick_interval = 256ms     # unit: ms/milliseconds, s(econd), m(inute), h(our), d(ay)
etcd.watcher.retry_interval = 15s   # unit: ms/milliseconds, s(econd), m(inute), h(our), d(ay)
etcd.watcher.request_timeout = 30m  # unit: ms/milliseconds, s(econd), m(inute), h(our), d(ay)
etcd.watcher.by_id = false
etcd.watcher.by_name = true
# etcd.watcher.by_type_id =
# etcd.watcher.by_type_name = 
# etcd.watcher.by_tag = 
etcd.report_alive.by_id   = true
etcd.report_alive.by_type = true
etcd.report_alive.by_name = true
etcd.report_alive.by_tag  =

; =========== external configure files ===========
; config.external =

